name: Docker Build and Deploy Login Microservice

on:
  push:
    branches:
      - test

jobs:
  build_docker_login:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd login
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Crear archivo .env con secrets de GitHub
        run: |
          cd login
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "EC2_AUTH_TEST=${{ secrets.EC2_AUTH_TEST }}" >> .env
          echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Run static tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EC2_AUTH_TEST: ${{ secrets.EC2_AUTH_TEST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          cd login
          pytest tests/test_connections.py

      - name: Build Docker image (con .env embebido solo para build)
        run: |
          cd login
          cp .env .env.prod
          docker build --build-arg ENV_FILE=.env.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/login:latest .

  push_dockerhub_login:
    needs: build_docker_login
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Crear archivo .env con secrets de GitHub
        run: |
          cd login
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "EC2_AUTH_TEST=${{ secrets.EC2_AUTH_TEST }}" >> .env
          echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image (con .env embebido solo para build)
        run: |
          cd login
          cp .env .env.prod
          docker build --build-arg ENV_FILE=.env.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/login:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/login:latest

  deploy_ec2_login:
    needs: push_dockerhub_login
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_AUTH_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "Generando archivo .env en EC2..."
            cat <<EOF > /home/ubuntu/.env
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EC2_AUTH_TEST=${{ secrets.EC2_AUTH_TEST }}
            EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF

            echo "Deteniendo y eliminando contenedor anterior si existe..."
            docker ps -a --format '{{.Names}}' | grep -Eq "^login$" && docker stop login && docker rm login

            echo "Descargando Ãºltima imagen..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/login:latest
            echo "Arrancando nuevo contenedor..."
            docker run -d \
              --name login \
              -p 1001:1001 \
              --env-file /home/ubuntu/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/login:latest
            echo "Logs del contenedor tras el arranque (si falla):"
            docker logs login || true
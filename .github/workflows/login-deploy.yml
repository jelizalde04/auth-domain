name: Docker Build and Deploy Login Microservice

on:
  push:
    branches:
      - test
      - main

jobs:
  build_docker_login:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd login
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Crear archivo .env con secrets de GitHub
        run: |
          cd login
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "EC2_AUTH_TEST=${{ secrets.EC2_AUTH_TEST }}" >> .env
          echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Run static tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EC2_AUTH_TEST: ${{ secrets.EC2_AUTH_TEST }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          cd login
          pytest tests/test_connections.py

      - name: Build Docker image (con .env embebido solo para build)
        run: |
          cd login
          cp .env .env.prod
          docker build --build-arg ENV_FILE=.env.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/login:latest .

  push_dockerhub_login:
    needs: build_docker_login
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Crear archivo .env con secrets de GitHub
        run: |
          cd login
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> .env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "EC2_AUTH_TEST=${{ secrets.EC2_AUTH_TEST }}" >> .env
          echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image (con .env embebido solo para build)
        run: |
          cd login
          cp .env .env.prod
          docker build --build-arg ENV_FILE=.env.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/login:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/login:latest

  deploy_login_qa:
    needs: push_dockerhub_login
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - name: Deploy to EC2 QA via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_AUTH_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^login$" && docker stop login && docker rm login
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/login:latest
            docker run -d \
              --name login \
              -p 1001:1001 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_NAME="${{ secrets.DB_NAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DOCKERHUB_TOKEN="${{ secrets.DOCKERHUB_TOKEN }}" \
              -e DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}" \
              -e EC2_AUTH_TEST="${{ secrets.EC2_AUTH_TEST }}" \
              -e EC2_SSH_KEY="${{ secrets.EC2_SSH_KEY }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/login:latest
            docker logs login || true

  deploy_login_prod:
    needs: push_dockerhub_login
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2 PROD via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_AUTH_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            docker ps -a --format '{{.Names}}' | grep -Eq "^login$" && docker stop login && docker rm login
            echo "${{ secrets.DOCKERHUB_TOKEN_PROD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME_PROD }}" --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME_PROD }}/login:latest
            docker run -d \
              --name login \
              -p 1001:1001 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL_PROD }}" \
              -e DB_HOST="${{ secrets.DB_HOST_PROD }}" \
              -e DB_NAME="${{ secrets.DB_NAME_PROD }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_PROD }}" \
              -e DB_PORT="${{ secrets.DB_PORT_PROD }}" \
              -e DB_USER="${{ secrets.DB_USER_PROD }}" \
              -e DOCKERHUB_TOKEN="${{ secrets.DOCKERHUB_TOKEN_PROD }}" \
              -e DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME_PROD }}" \
              -e EC2_AUTH_PROD="${{ secrets.EC2_AUTH_PROD }}" \
              -e EC2_SSH_KEY="${{ secrets.EC2_SSH_KEY_PROD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET_PROD }}" \
              ${{ secrets.DOCKERHUB_USERNAME_PROD }}/login:latest
            docker logs login || true
